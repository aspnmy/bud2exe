#!/bin/bash

# 定义颜色代码
RED="\033[0;31m"
GREEN="\033[0;32m"
NC="\033[0m"  # 无颜色

# 初始化版本号
bud_ver=$(cat "./newVer.bud") || { echo -e "${RED}错误：版本文件 './newVer.bud' 为空或未找到。${NC}"; exit 1; }
VERSION=$bud_ver
echo -e "Version: $VERSION"

output_path="../Build"
SRC_DIR="../Src"
TOOLS_DIR="../tools"
LOG_DIR="../logs"

input_files=("bud2exe_poetryBeBe" "bud2exe_cli" "bud2exe_climini" "bud2exe_makeRun")

# 创建输出目录
mkdir -p "$output_path"

# 记录消息和时间戳的函数，支持不同日志级别
log_message() {
    local level=$1
    local message=$2
    local timestamp
    timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local log_file
    log_file="${LOG_DIR}/$(date +%Y-%m-%d).log"

    case $level in
        ERROR)
            echo "[$timestamp] [ERROR] $message" >> "$log_file"
            ;;
        DEBUG)
            echo "[$timestamp] [DEBUG] $message" >> "$log_file"
            ;;
        *)
            # 默认不记录 INFO 级别的日志
            ;;
    esac
}

# 编译函数
compile() {
    local input_file=$1
    local output_name=$2
    ./bud2exe_climini -s b2bin -o "$output_path/${output_name}_sfh_linux" -f "./$input_file" && \
    ./bud2exe_climini -s b2GCC -o "$output_path/${output_name}_gcc_linux" -f "./$input_file"
    if [[ $? -ne 0 ]]; then
        log_message "ERROR" "编译失败：$input_file"
        return 1
    fi
}

# 计算 SHA256 哈希函数
calculate_sha256() {
    local file=$1
    if [[ -f "$file" ]]; then
        sha256sum "$file" > "${file}.sha256"
    else
        log_message "ERROR" "文件未找到：$file"
    fi
}

# 清理函数
cleanC() {
    find "$SRC_DIR" -name "*.x.c" -delete
    log_message "DEBUG" "所有中间缓存已清理"
}

# 清理函数
cleanLOGS() {
    find "$LOG_DIR" -name "*.*" -delete
    log_message "DEBUG" "所有日志已清理"
}

# 清理函数
cleanBuilds() {
    find "$output_path" -name "*.*" -delete
    log_message "DEBUG" "所有编译文件已清理"
}

# 显示菜单函数
show_menu() {
        echo -e "${BLUE}
/*
 *  ██████╗ ██╗   ██╗██████╗ ██████╗ ███████╗██╗  ██╗███████╗
 *  ██╔══██╗██║   ██║██╔══██╗╚════██╗██╔════╝╚██╗██╔╝██╔════╝
 *  ██████╔╝██║   ██║██║  ██║ █████╔╝█████╗   ╚███╔╝ █████╗  
 *  ██╔══██╗██║   ██║██║  ██║██╔═══╝ ██╔══╝   ██╔██╗ ██╔══╝  
 *  ██████╔╝╚██████╔╝██████╔╝███████╗███████╗██╔╝ ██╗███████╗
 *  ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝
 *  'author': 'aspnmy@gmail.com'                                                          
 */${NC}"
    echo -e "${GREEN}poetryBeBe poetry哔哔小子, 一个简单的poetry管理工具-免费版${NC}"
    echo -e "${YELLOW}Tg讨论组: https://t.me/+BqvlH6BDOWE3NjQ1${NC}"
    echo -e "${YELLOW}赞助我们: TKqTUNcBWiRDdczuHoQstMD4XRyFgNwHiF (TRX/USDT)${NC}"
    echo -e "请选择一个选项:"
    echo "1) 打包bud2exe所有版本"
    echo "2) 计算哈希值并写文件"
    echo "3) 清理所有编译中间缓存"
    echo "4) 清理所有已编译文件"
    echo "5) 清理所有日志"
    echo "0) 退出"
}

# 主函数
main() {
    case $1 in
        1)
            echo "打包所有版本"
            for file in "$SRC_DIR"/"${input_files[@]}"; do
                compile "$file" "${file}"
            done
            ;;
        2)
            echo "计算哈希值并写文件"
            for file in "$output_path"/*; do
                calculate_sha256 "$file"
            done
            ;;
        3)
            echo "清零所有编译中间缓存"
            cleanC
            ;;
        4)
            echo "清理所有已编译文件"
            cleanBuilds
            ;;
        5)
            echo "清理所有日志"
            cleanLOGS
            ;;
        0)
            echo "退出菜单"
            exit 0
            ;;
        *)
            echo "无效的选项，请重新输入。"
            ;;
    esac
}

# 无限循环，直到用户选择退出
while true; do
    show_menu
    read -p "请输入你的选择: " choice
    main "$choice"
    echo ""
done